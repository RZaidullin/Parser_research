#include <string.h>
#include <iostream>

static uint8_t test_frame1[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x81, 0x00, 0x00, 0x02,                // first vlan header
        0x81, 0x00, 0x00, 0x04,                // second vlan header
        0x88, 0x48,                            // end of ethernet header
        0x00, 0x01, 0x4a, 0xff,                // first mpls label
        0x00, 0x01, 0x3a, 0xff,                // second mpls label
        0x00, 0x01, 0x2a, 0xff,                // third mpls label
        0x00, 0x01, 0x2a, 0xff,                // fourth mpls label
        0x00, 0x01, 0x1b, 0xff,                // fifth mpls label

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t test_frame[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x08, 0x00,

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

struct mac_header {
    uint8_t mac_dst[6];
    uint8_t mac_src[6];
    uint16_t ethtype;
};

// Think about c_vlan and smth else
struct vlan_header {
    uint16_t vlan_tag;
    uint16_t tpid;
};

struct mpls_header {
    uint8_t mpls_tag_tc_s[3];
    uint8_t mpls_ttl;
};



struct arp_header {
    uint16_t htype;
    uint16_t ptype;
    uint8_t hlen;
    uint8_t plen;
    uint16_t oper;
    uint8_t sha[6];      // sender mac
    uint8_t spa[4];      // sender ip
    uint8_t tha[6];      // target mac
    uint8_t tpa[4];      // target ip
};

struct ipv4_header {
    uint8_t version_ihl;        // version - 4 bits, ihl - 4 bits
    uint8_t dcsp_ecn;           // dcsp - 6 bits, ecn - 2 bits
    uint16_t length;
    uint16_t identification;
    uint16_t flags_offset;      // flags - 3 bits, offset - 13 bits
    uint8_t ip_ttl;
    uint8_t protocol;
    uint16_t crc;
    uint8_t ip_src[4];
    uint8_t ip_dst[4];

    // options (1 - 4 bytes) if (ihl > 5)
};

struct ipv6_header {
    uint8_t version_tc_fl[4]; // version, traffic class and flow label
    uint16_t payload_length;
    uint8_t  next_header;
    uint8_t hop_limit;
    uint8_t ip_src[4];
    uint8_t ip_dst[4];

    // options
};

struct tcp_header {
    uint16_t src_port;
    uint16_t dst_port;
    uint8_t sequence_number[4];
    uint8_t ack_number[4];
    uint8_t data_offset_reserved;
    uint8_t flags;
    uint16_t window_size;
    uint16_t checksum;
    uint16_t urg_pointer;

    // options
};

struct udp_header {
    uint16_t src_port;
    uint16_t dst_port;
    uint16_t length;
    uint16_t checksum;
};

struct icmp_header {
    uint8_t type;
    uint8_t code;
    uint16_t checksum;
    uint8_t rest[4];
};

struct location {
	uint32_t address;
	uint16_t framesz;
};

struct packet_ctx {
    uint8_t * packet;
    int counter;

    struct mac_header mac_header;
    // uint16_t ethtype;
    struct vlan_header first_vlan_header;
    struct vlan_header second_vlan_header;

    struct mpls_header first_mpls_header;
    struct mpls_header second_mpls_header;
    struct mpls_header third_mpls_header;
    struct mpls_header fourth_mpls_header;
    struct mpls_header fifth_mpls_header;

    struct arp_header arp_header;

    struct ipv4_header ipv4_header;
    struct ipv6_header ipv6_header;

    struct tcp_header tcp_header;
    struct udp_header udp_header;
    struct icmp_header icmp_header;

    // struct location address;
};

static uint8_t enterprise_frame1[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x81, 0x00, 0x00, 0x02,                // first vlan header
        0x81, 0x00, 0x00, 0x04,                // second vlan header
        0x08, 0x00,                            // end of ethernet header

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t enterprise_frame2[] = {
        0x33, 0x33, 0x00, 0x01, 0x00, 0x02,
        0x4C, 0x72, 0xB9, 0xB2, 0x31, 0xE9,
        0x81, 0x00, 0x00, 0x02,                // first vlan header
        0x81, 0x00, 0x00, 0x04,                // second vlan header
        0x86, 0xDD,                            // end of ethernet header

        0x60, 0x00, 0x00, 0x00, 0x00, 0x62,
        0x11, 0x01, 0xFE, 0x80, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xBD, 0x0F,               
        0x91, 0xAF, 0x47, 0xD0, 0x8A, 0x15,
        0xFF, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x02,
                                               // end of ipv6 header
        0x02, 0x22, 0x02, 0x23, 0x00, 0x62,
        0x1E, 0x9F,                            // end of UDP header

        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t enterprise_frame3[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x08, 0x00,                            // end of ethernet header

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t enterprise_frame4[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x81, 0x00, 0x00, 0x02,                // first vlan header
        0x08, 0x00,                            // end of ethernet header

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t service_frame1[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x08, 0x00,                            // end of ethernet header

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t service_frame2[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x88, 0x48,                            // end of ethernet header
        0x00, 0x01, 0x1b, 0xff,                // fifth mpls label

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t service_frame3[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x88, 0x48,                            // end of ethernet header
        0x00, 0x01, 0x2a, 0xff,                // fourth mpls label
        0x00, 0x01, 0x1b, 0xff,                // fifth mpls label

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t service_frame4[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x88, 0x48,                            // end of ethernet header
        0x00, 0x01, 0x3a, 0xff,                // third mpls label
        0x00, 0x01, 0x2a, 0xff,                // fourth mpls label
        0x00, 0x01, 0x1b, 0xff,                // fifth mpls label

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t service_frame5[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x88, 0x48,                            // end of ethernet header
        0x00, 0x01, 0x4a, 0xff,                // second mpls label
        0x00, 0x01, 0x3a, 0xff,                // third mpls label
        0x00, 0x01, 0x2a, 0xff,                // fourth mpls label
        0x00, 0x01, 0x1b, 0xff,                // fifth mpls label

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t service_frame6[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x88, 0x48,                            // end of ethernet header
        0x00, 0x01, 0x5a, 0xff,                // first mpls label
        0x00, 0x01, 0x4a, 0xff,                // second mpls label
        0x00, 0x01, 0x3a, 0xff,                // third mpls label
        0x00, 0x01, 0x2a, 0xff,                // fourth mpls label
        0x00, 0x01, 0x1b, 0xff,                // fifth mpls label

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};

static uint8_t test_frame5[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x81, 0x00, 0x00, 0x02,                // first vlan header
        0x88, 0x48,                            // end of ethernet header
        0x00, 0x01, 0x4a, 0xff,                // first mpls label
        0x00, 0x01, 0x3a, 0xff,                // second mpls label
        0x00, 0x01, 0x2a, 0xff,                // third mpls label
        0x00, 0x01, 0x2a, 0xff,                // fourth mpls label
        0x00, 0x01, 0x1b, 0xff,                // fifth mpls label

        0x45, 0xc0, 0x00, 0x3c, 0xbd, 0x54,
        0x40, 0x00, 0x40, 0x06, 0x7e, 0xa5,
        0x7f, 0x00, 0x00, 0x01,                // src_ip
        0x7f, 0x00, 0x00, 0x01,                // dst_ip
                                               // end of ipv4 header
        0x9d, 0xae,
        0x19, 0xfd, 0x43, 0x05, 0x1b, 0x87,
        0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0xaa, 0xaa, 0xfe, 0x30, 0x00, 0x00,
        0x02, 0x04, 0xff, 0xd7, 0x04, 0x02,
        0x08, 0x0a, 0x3c, 0x2c, 0xa6, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x07
};
